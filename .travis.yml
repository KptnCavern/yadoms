language: cpp

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
#log environment variables configuration
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "using uploaded components"; else echo "using official components and build them"; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Upload build components"; else echo "Do not upload built components"; fi

#g++ 4.8
- echo 'Installing G++ 4.8'
- sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
- sudo apt-get update -qq
- if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
- if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi
- sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90

# deps
- echo 'Installing some dependencies'
- sudo apt-get install libbz2-dev python-dev libudev-dev

#CMake
- echo 'Installing CMake 3.4.3'
- sudo apt-get remove cmake
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget  -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4' http://yadoms.com/travis_build/cmake-3.4.3-build.tar.bz2; else wget --no-check-certificate https://cmake.org/files/v3.4/cmake-3.4.3.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar jxf cmake-3.4.3-build.tar.bz2; else tar zxf cmake-3.4.3.tar.gz; fi
- cd cmake-3.4.3 
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass bootstrap" ; else ./bootstrap  > yadoms_cmake.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass make"; else make  > yadoms_cmake.log; fi
- sudo make install  > yadoms_cmake.log
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf cmake-3.4.3-build.tar.bz2 cmake-3.4.3; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T cmake-3.4.3-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f cmake-3.4.3-build.tar.bz2

# boost
- echo 'Building Boost 1.62.0'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4' http://yadoms.com/travis_build/boost_1_62_0-build.tar.bz2; else wget http://netcologne.dl.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.bz2; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && tar xjf boost_1_62_0-build.tar.bz2; else tar xjf boost_1_62_0.tar.bz2; fi
- cd boost_1_62_0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass boost/bootstrap"; else ./bootstrap.sh > yadoms_boost.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-thread --with-system link=shared > yadoms_boost.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && tar cjf boost_1_62_0-build.tar.bz2 boost_1_62_0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && curl --ftp-create-dirs -T boost_1_62_0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && rm -f boost_1_62_0-build.tar.bz2; fi
  
 # poco
- echo 'Building Poco 1.7.6-all'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4' http://yadoms.com/travis_build/poco-1.7.6-all-build.tar.bz2; else wget http://pocoproject.org/releases/poco-1.7.6/poco-1.7.6-all.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && tar xjf poco-1.7.6-all-build.tar.bz2; else tar xzf poco-1.7.6-all.tar.gz; fi
- sudo apt-get install libssl-dev
- cd poco-1.7.6-all/
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass poco/configure"; else ./configure --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page  --no-samples --no-tests > yadoms_poco.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass poco/make"; else make > yadoms_poco.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && tar cjf poco-1.7.6-all-build.tar.bz2 poco-1.7.6-all; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && curl --ftp-create-dirs -T poco-1.7.6-all-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && rm -f poco-1.7.6-all-build.tar.bz2; fi

# protobuf
- echo 'Building Protobuf 2.6.1'
- sudo apt-get install autoconf libtool
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4' http://yadoms.com/travis_build/protobuf-2.6.1-build.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && tar xjf protobuf-2.6.1-build.tar.bz2; else tar xzf protobuf-2.6.1.tar.gz; fi
- cd protobuf-2.6.1
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass protobuf/autogen"; else ./autogen.sh > yadoms_protobuf.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass protobuf/configure"; else ./configure > yadoms_protobuf.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then && echo "Bypass protobuf/make"; else make > yadoms_protobuf.log; fi
- sudo make install > yadoms_protobuf.log
- sudo ldconfig
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && tar cjf protobuf-2.6.1-build.tar.bz2 protobuf-2.6.1; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && curl --ftp-create-dirs -T protobuf-2.6.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then && rm -f protobuf-2.6.1-build.tar.bz2; fi

#gammu
- echo 'Building Gammu 1.36.8'
- wget http://dl.cihar.com/gammu/releases/gammu-1.36.8.tar.gz
- tar zxf gammu-1.36.8.tar.gz
- cd gammu-1.36.8
- mkdir build
- cd build
- cmake .. -DBUILD_SHARED_LIBS=ON > yadoms_gammu.log
- make > yadoms_gammu.log
- cd ..
- cd ..


# PCRE
- echo 'Installing PRCE'
- sudo apt-get install libpcre3 libpcre3-dev

# SWIG
- echo 'Building Swig 3.0.8'
- wget http://prdownloads.sourceforge.net/swig/swig-3.0.8.tar.gz
- tar xzf swig-3.0.8.tar.gz
- cd swig-3.0.8
- ./configure > yadoms_swig.log
- make> yadoms_swig.log
- sudo make install > yadoms_swig.log
- cd ..

# PostgreSQL
- sudo apt-get install libpq-dev postgresql-server-dev-9.3

script:
# Yadoms configuration file
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
- cp sources/CMakeListsUserConfig.sample.txt sources/CMakeListsUserConfig.txt 
- echo 'set(BOOST_ROOT "'$PWD'/boost_1_62_0")' > sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/poco-1.7.6-all")' >> sources/CMakeListsUserConfig.txt
- echo 'set(COTIRE_USE ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(COTIRE_USE_UNITY ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$PWD'/protobuf-2.6.1")' >> sources/CMakeListsUserConfig.txt
- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.36.8")' >> sources/CMakeListsUserConfig.txt
- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.8")' >> sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat sources/CMakeListsUserConfig.txt

# Yadoms
- echo 'Generating makefile'
- sh cmake_linux.sh m
- cd projects
- echo 'Building Yadoms'
- make all_unity
- cd ..

