language: cpp

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
#log environment variables configuration
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "using uploaded components"; else echo "using official components and build them"; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Upload build components"; else echo "Do not upload built components"; fi


- echo ${FTP_USER}
- echo ${FTP_PASSWORD}

#g++ arm-linux-gnueabihf 
- echo 'Installing arm-linux-gnueabihf cross toolchain'
- git clone --depth=1 git://github.com/raspberrypi/tools.git
- export PATH=$PATH:$PWD/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin

# deps

#CMake
- echo 'Installing CMake 3.7.1'
- sudo apt-get remove cmake
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget  -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/cmake-3.7.1-build.tar.bz2; else wget --no-check-certificate https://cmake.org/files/v3.7/cmake-3.7.1.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar jxf cmake-3.7.1-build.tar.bz2; else tar zxf cmake-3.7.1.tar.gz; fi
- cd cmake-3.7.1 
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass bootstrap" ; else ./bootstrap  > yadoms_cmake.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass make"; else make  > yadoms_cmake.log; fi
- sudo make install  > yadoms_cmake.log
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf cmake-3.7.1-build.tar.bz2 cmake-3.7.1; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T cmake-3.7.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f cmake-3.7.1-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.63.0'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/boost_1_63_0-build.tar.bz2; else wget http://netcologne.dl.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.bz2; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf boost_1_63_0-build.tar.bz2; else tar xjf boost_1_63_0.tar.bz2; fi
- cd boost_1_63_0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh > yadoms_boost.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass boost/config"; else echo 'using gcc:arm:arm-linux-gnueabihf-g++ ;' > $HOME/user-config.jam; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-serialization --with-thread --with-system --no-samples --no-tests toolset=gcc-arm link=static > yadoms_boost.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf boost_1_63_0-build.tar.bz2 boost_1_63_0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T boost_1_63_0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f boost_1_63_0-build.tar.bz2; fi
  
 # openssl
- echo 'Building OpenSSL'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/openssl-1.0.2k-build.tar.bz2 else wget https://www.openssl.org/source/openssl-1.0.2k.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xzf openssl-1.0.2k-build.tar.bz2; else tar xjf openssl-1.0.2k.tar.gz; fi
- cd openssl-1.0.2k
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass OpenSSL/configure"; else ./Configure --prefix=$PWD/../build/openssl os/compiler:arm-linux-gnueabihf; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass OpenSSL/make"; else make CC="arm-linux-gnueabihf-gcc" AR="arm-linux-gnueabihf-ar" RANLIB="arm-linux-gnueabihf-ranlib"; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass OpenSSL/make_install"; else make install; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf openssl-1.0.2k-build.tar.bz2 openssl-1.0.2k; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T openssl-1.0.2k-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f openssl-1.0.2k-build.tar.bz2; fi

# poco
- echo 'Building Poco 1.7.7-all'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/poco-1.7.7-all-build.tar.bz2; else wget http://pocoproject.org/releases/poco-1.7.7/poco-1.7.7-all.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf poco-1.7.7-all-build.tar.bz2; else tar xzf poco-1.7.7-all.tar.gz; fi
- sudo apt-get install libssl-dev libgnutls-dev libopencv-gpu-dev
- cd poco-1.7.7-all/
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/copy_config_file"; else cp build/config/ARM-Linux build/config/RaspberryPI; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/configure_config_file"; else - echo 'TOOL               = arm-linux-gnueabihf' > build/config/RaspberryPI; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/configure"; else ./configure --static --config=RaspberryPI --no-samples --no-tests --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$PWD/../build/openssl/include --library-path=$PWD/../build/openssl/lib> yadoms_poco.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/make"; else make > yadoms_poco.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf poco-1.7.7-all-build.tar.bz2 poco-1.7.7-all; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T poco-1.7.7-all-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f poco-1.7.7-all-build.tar.bz2; fi

# protobuf (host)
- echo 'Building Protobuf 3.2.0 HOST '
- sudo apt-get install autoconf libtool
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/protobuf-3.2.0-build.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-cpp-3.2.0.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf protobuf-3.2.0-build.tar.bz2; else tar xzf protobuf-cpp-3.2.0.tar.gz; fi
- cd protobuf-3.2.0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/mkdir build"; else mkdir build > yadoms_protobuf.log; fi
- cd build
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/cmake ../cmake"; else cmake ../cmake > yadoms_protobuf.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/cmake --build ."; else cmake --build . > yadoms_protobuf.log; fi
- sudo make install
- sudo ldconfig
- cd ..
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf protobuf-3.2.0-build.tar.bz2 protobuf-3.2.0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T protobuf-3.2.0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f protobuf-3.2.0-build.tar.bz2; fi

# protobuf (pi)
- echo 'Building Protobuf 3.2.0 PI'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/protobuf-3.2.0-build-pi.tar.bz2; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf protobuf-3.2.0-build-pi.tar.bz2; fi
- cd protobuf-3.2.0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/clean"; else make clean > yadoms_protobuf_pi.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/configure"; else ./configure --enable-shared=no --host=arm-linux-gnueabihf --prefix=$PWD/../build/protobuf --with-protoc=protoc > yadoms_protobuf_pi.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/make"; else make > yadoms_protobuf_pi.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/make install"; else make install > yadoms_protobuf_pi.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf protobuf-3.2.0-build-pi.tar.bz2 protobuf-3.2.0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T protobuf-3.2.0-build-pi.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f protobuf-3.2.0-build-pi.tar.bz2; fi


 # pcre
- echo 'Building PCRE'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/raspberry_pi/pcre-8.40-build.tar.bz2 else wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xzf pcre-8.40-build.tar.bz2; else tar xzf pcre-8.40.tar.gz; fi
- cd pcre-8.40
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass PCRE/configure"; else ./configure --host=arm-linux-gnueabihf CC=arm-linux-gnueabihf-gcc AR=arm-linux-gnueabihf-ar STRIP=arm-linux-gnueabihf-strip RANLIB=arm-linux-gnueabihf-ranlib --prefix=$PWD/../build/pcre; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass PCRE/make"; else make --host=arm; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass PCRE/make_install"; else make install; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf pcre-8.40-build.tar.bz2 pcre-8.40; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T pcre-8.40-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/raspberry_pi/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f pcre-8.40-build.tar.bz2; fi


#gammu
# - echo 'Building Gammu 1.36.8'
# - wget http://dl.cihar.com/gammu/releases/gammu-1.36.8.tar.gz
# - tar zxf gammu-1.36.8.tar.gz
# - cd gammu-1.36.8
# - mkdir build
# - cd build
# - cmake .. -DBUILD_SHARED_LIBS=ON > yadoms_gammu.log
# - make > yadoms_gammu.log
# - cd ..
# - cd ..

# SWIG
#- echo 'Building Swig 3.0.8'
#- wget http://prdownloads.sourceforge.net/swig/swig-3.0.8.tar.gz
#- tar xzf swig-3.0.8.tar.gz
#- cd swig-3.0.8
#- ./configure > yadoms_swig.log
#- make> yadoms_swig.log
#- sudo make install > yadoms_swig.log
#- cd ..
#
## PostgreSQL
#- sudo apt-get install libpq-dev postgresql-server-dev-9.3
#
#script:
## Yadoms configuration file
#- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
#- cp sources/CMakeListsUserConfig.sample.txt sources/CMakeListsUserConfig.txt 
#- echo 'set(BOOST_ROOT "'$PWD'/boost_1_63_0")' > sources/CMakeListsUserConfig.txt
#- echo 'set(POCO_ROOT "'$PWD'/poco-1.7.7-all")' >> sources/CMakeListsUserConfig.txt
#- echo 'set(COTIRE_USE ON)' >> sources/CMakeListsUserConfig.txt
#- echo 'set(COTIRE_USE_UNITY ON)' >> sources/CMakeListsUserConfig.txt
#- echo 'set(PROTOBUF_ROOT "'$PWD'/protobuf-3.1.0")' >> sources/CMakeListsUserConfig.txt
#- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.36.8")' >> sources/CMakeListsUserConfig.txt
#- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.8")' >> sources/CMakeListsUserConfig.txt
#- echo 'Result:'
#- cat sources/CMakeListsUserConfig.txt
#
## Yadoms
#- echo 'Generating makefile'
#- sh cmake_linux.sh m
#- cd projects
#- echo 'Building Yadoms'
#- make all_unity
#- cd ..

