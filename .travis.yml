language: cpp

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
#log environment variables configuration
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "using uploaded components"; else echo "using official components and build them"; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Upload build components"; else echo "Do not upload built components"; fi

#g++ 4.8
- echo 'Installing G++ 4.8'
- sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
- sudo apt-get update -qq
- if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
- if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi
- sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90

# deps
- echo 'Installing some dependencies'
- sudo apt-get install libbz2-dev python-dev libudev-dev

# CMake
- echo 'Installing CMake 3.7.1'
- sudo apt-get remove cmake
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget  -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/cmake-3.7.1-build.tar.bz2; else wget --no-check-certificate https://cmake.org/files/v3.7/cmake-3.7.1.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar jxf cmake-3.7.1-build.tar.bz2; else tar zxf cmake-3.7.1.tar.gz; fi
- cd cmake-3.7.1 
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass bootstrap" ; else ./bootstrap  > yadoms_cmake.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass make"; else make  > yadoms_cmake.log; fi
- sudo make install  > yadoms_cmake.log
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf cmake-3.7.1-build.tar.bz2 cmake-3.7.1; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T cmake-3.7.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/static/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f cmake-3.7.1-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.63.0'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/boost_1_63_0-build.tar.bz2; else wget http://netcologne.dl.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.bz2; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf boost_1_63_0-build.tar.bz2; else tar xjf boost_1_63_0.tar.bz2; fi
- cd boost_1_63_0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh > yadoms_boost.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-thread --with-system link=static runtime-link=static cxxflags=-fPIC > yadoms_boost.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf boost_1_63_0-build.tar.bz2 boost_1_63_0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T boost_1_63_0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/static/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f boost_1_63_0-build.tar.bz2; fi
  
 # poco
- echo 'Building Poco 1.7.7-all'
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/poco-1.7.7-all-build.tar.bz2; else wget http://pocoproject.org/releases/poco-1.7.7/poco-1.7.7-all.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf poco-1.7.7-all-build.tar.bz2; else tar xzf poco-1.7.7-all.tar.gz; fi
- sudo apt-get install libssl-dev libgnutls-dev libopencv-gpu-dev
- cd poco-1.7.7-all/
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CC = -fPIC' >> build/config/Linux; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CXX = -fPIC' >> build/config/Linux; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/configure"; else ./configure --static --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --no-samples --no-tests --config=Linux > yadoms_poco.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass poco/make"; else make > yadoms_poco.log; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf poco-1.7.7-all-build.tar.bz2 poco-1.7.7-all; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T poco-1.7.7-all-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/static/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f poco-1.7.7-all-build.tar.bz2; fi

# protobuf
- echo 'Building Protobuf 3.1.0'
- sudo apt-get install autoconf libtool
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/protobuf-3.1.0-build.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v3.1.0/protobuf-cpp-3.1.0.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf protobuf-3.1.0-build.tar.bz2; else tar xzf protobuf-cpp-3.1.0.tar.gz; fi
- cd protobuf-3.1.0
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/mkdir build"; else mkdir build > yadoms_protobuf.log; fi
- cd build
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/cmake ../cmake"; else cmake ../cmake > yadoms_protobuf.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass protobuf/cmake --build ."; else cmake --build . > yadoms_protobuf.log; fi
- sudo make install
- sudo ldconfig
- cd ..
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf protobuf-3.1.0-build.tar.bz2 protobuf-3.1.0; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T protobuf-3.1.0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/static/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f protobuf-3.1.0-build.tar.bz2; fi

# gammu
- echo 'Building Gammu 1.38.1'
- sudo apt-get install python-dev pkg-config libmysqlclient-dev libpq-dev libcurl4-gnutls-dev libusb-1.0-0-dev libdbi0-dev libbluetooth-dev libgudev-1.0-dev libglib2.0-dev unixodbc-dev
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/gammu-1.38.1-build.tar.bz2; else wget http://dl.cihar.com/gammu/releases/gammu-1.38.1.tar.gz; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then tar xjf gammu-1.38.1-build.tar.bz2; else tar zxf gammu-1.38.1.tar.gz; fi
- cd gammu-1.38.1
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass mkdir build"; else mkdir build; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass cd build"; else cd build; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass cmake -DBUILD_SHARED_LIBS=OFF .."; else cmake -DBUILD_SHARED_LIBS=OFF .. > yadoms_gammu.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass make"; else make > yadoms_gammu.log; fi
- if [ ${TRAVIS_USE_UPLOADED_COMPONENTS} = true ]; then echo "Bypass cd .."; else cd ..; fi
- cd ..
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then tar cjf gammu-1.38.1-build.tar.bz2 gammu-1.38.1; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then curl --ftp-create-dirs -T gammu-1.38.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ftp://ftp.jano42.fr/travis_build/static/; fi
- if [ ${TRAVIS_UPLOAD_COMPONENTS} = true ]; then rm -f gammu-1.38.1-build.tar.bz2; fi


# PCRE
- echo 'Installing PRCE'
- sudo apt-get install libpcre3 libpcre3-dev

# SWIG
- echo 'Building Swig 3.0.8'
- wget http://prdownloads.sourceforge.net/swig/swig-3.0.8.tar.gz
- tar xzf swig-3.0.8.tar.gz
- cd swig-3.0.8
- ./configure > yadoms_swig.log
- make> yadoms_swig.log
- sudo make install > yadoms_swig.log
- cd ..

# PostgreSQL
- sudo apt-get install libpq-dev postgresql-server-dev-9.3

script:
# Yadoms configuration file
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
- echo 'set(BOOST_ROOT "'$PWD'/boost_1_63_0")' > sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/poco-1.7.7-all")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$PWD'/protobuf-3.1.0")' >> sources/CMakeListsUserConfig.txt
- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.38.1")' >> sources/CMakeListsUserConfig.txt
- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.8")' >> sources/CMakeListsUserConfig.txt
- echo 'set(COTIRE_USE ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(COTIRE_USE_UNITY ON)' >> sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat sources/CMakeListsUserConfig.txt

# Yadoms
- echo 'Generating makefile'
- sh cmake_linux.sh m
- cd projects
- echo 'Building Yadoms'
- make all_unity
- cd ..

